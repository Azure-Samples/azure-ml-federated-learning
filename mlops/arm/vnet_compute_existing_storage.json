{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.14.85.62628",
      "templateHash": "7917532850185433754"
    }
  },
  "parameters": {
    "machineLearningName": {
      "type": "string",
      "metadata": {
        "description": "Name of AzureML workspace to attach compute+storage to."
      }
    },
    "machineLearningRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the machine learning workspace"
      }
    },
    "machineLearningIsPrivate": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Set true to provision PLEs necessary for private workspace to interact with the pair"
      }
    },
    "pairRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Specifies the location of the pair resources."
      }
    },
    "pairBaseName": {
      "type": "string",
      "metadata": {
        "description": "Base name used for creating all pair resources."
      }
    },
    "existingStorageAccountName": {
      "type": "string",
      "metadata": {
        "description": "Existing storage account name to attach to the pair."
      }
    },
    "existingStorageAccountResourceGroup": {
      "type": "string",
      "metadata": {
        "description": "Resource group of the existing storage account to attach to the pair."
      }
    },
    "existingStorageAccountSubscriptionId": {
      "type": "string",
      "metadata": {
        "description": "SubscriptionId of the existing storage account to attach to the pair."
      }
    },
    "existingStorageContainerName": {
      "type": "string",
      "defaultValue": "private",
      "metadata": {
        "description": "Name of the storage container to use for the pair datastore"
      }
    },
    "datastoreName": {
      "type": "string",
      "defaultValue": "[replace(format('datastore_{0}', parameters('pairBaseName')), '-', '_')]",
      "metadata": {
        "description": "Name of the datastore for attaching the storage to the AzureML workspace."
      }
    },
    "computeName": {
      "type": "string",
      "defaultValue": "[format('{0}-01', parameters('pairBaseName'))]",
      "metadata": {
        "description": "Name of the default compute cluster for the pair"
      }
    },
    "computeSKU": {
      "type": "string",
      "defaultValue": "Standard_DS3_v2",
      "metadata": {
        "description": "VM size for the compute cluster"
      }
    },
    "computeNodes": {
      "type": "int",
      "defaultValue": 4,
      "metadata": {
        "description": "VM nodes for the default compute cluster"
      }
    },
    "jobsUaiName": {
      "type": "string",
      "defaultValue": "[format('uai-jobs-{0}', parameters('pairBaseName'))]",
      "metadata": {
        "description": "Name of the UAI for the jobs running in the pair"
      }
    },
    "nsgResourceName": {
      "type": "string",
      "defaultValue": "[format('nsg-{0}', parameters('pairBaseName'))]",
      "metadata": {
        "description": "Name of the Network Security Group resource"
      }
    },
    "vnetResourceName": {
      "type": "string",
      "defaultValue": "[format('vnet-{0}', parameters('pairBaseName'))]",
      "metadata": {
        "description": "Name of the vNET resource"
      }
    },
    "vnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/16",
      "metadata": {
        "description": "Virtual network address prefix"
      }
    },
    "computeSubnetPrefix": {
      "type": "string",
      "defaultValue": "10.0.1.0/24",
      "metadata": {
        "description": "Subnet address prefix"
      }
    },
    "endpointsSubnetPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/24",
      "metadata": {
        "description": "Subnet address prefix"
      }
    },
    "storagePLEStaticIP": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional: static ip for the pair blob storage PLE"
      }
    },
    "createMachineLearningPLE": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Create a PLE for the machine learning workspace (if machineLearningIsPrivate=true)"
      }
    },
    "amlPLEStaticIPs": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional: static ip for the PLE to the workspace (if machineLearningIsPrivate=true)"
      }
    },
    "enableNodePublicIp": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable compute node public IP"
      }
    },
    "storagePublicNetworkAccess": {
      "type": "string",
      "defaultValue": "Disabled",
      "metadata": {
        "description": "Is public network access to the existing storage allowed or not?"
      },
      "allowedValues": [
        "Enabled",
        "vNetOnly",
        "Disabled"
      ]
    },
    "blobPrivateDNSZoneName": {
      "type": "string",
      "defaultValue": "[format('privatelink.blob.{0}', environment().suffixes.storage)]",
      "metadata": {
        "description": "Name of the private DNS zone for blob"
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Tags to curate the resources in Azure."
      }
    }
  },
  "variables": {
    "amlPrivateDnsZoneNames": {
      "azureusgovernment": "privatelink.api.ml.azure.us",
      "azurechinacloud": "privatelink.api.ml.azure.cn",
      "azurecloud": "privatelink.api.azureml.ms"
    },
    "amlPrivateDnsZoneName": "[variables('amlPrivateDnsZoneNames')[toLower(environment().name)]]"
  },
  "resources": [
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2022-01-31-preview",
      "name": "[parameters('jobsUaiName')]",
      "location": "[parameters('pairRegion')]",
      "tags": "[parameters('tags')]"
    },
    {
      "condition": "[and(parameters('machineLearningIsPrivate'), parameters('createMachineLearningPLE'))]",
      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', variables('amlPrivateDnsZoneName'), uniqueString(subscription().id, resourceGroup().id, parameters('vnetResourceName'), variables('amlPrivateDnsZoneName'), 'global'))]",
      "location": "global",
      "properties": {
        "registrationEnabled": false,
        "virtualNetwork": {
          "id": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-deployment', parameters('vnetResourceName'))), '2020-10-01').outputs.id.value]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('{0}-deployment', parameters('vnetResourceName')))]"
      ]
    },
    {
      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', parameters('blobPrivateDNSZoneName'), uniqueString(format('{0}-deployment', parameters('vnetResourceName')), parameters('blobPrivateDNSZoneName'), 'global'))]",
      "location": "global",
      "properties": {
        "registrationEnabled": false,
        "virtualNetwork": {
          "id": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-deployment', parameters('vnetResourceName'))), '2020-10-01').outputs.id.value]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('{0}-deployment', parameters('vnetResourceName')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-deployment', parameters('nsgResourceName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('pairRegion')]"
          },
          "nsgName": {
            "value": "[parameters('nsgResourceName')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "workspaceRegion": {
            "value": "[parameters('machineLearningRegion')]"
          },
          "enableNodePublicIp": {
            "value": "[parameters('enableNodePublicIp')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.14.85.62628",
              "templateHash": "9356966489364776969"
            }
          },
          "parameters": {
            "nsgName": {
              "type": "string",
              "metadata": {
                "description": "Name of the network security group"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Azure region of the deployment"
              }
            },
            "workspaceRegion": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Region of the AzureML workspace"
              }
            },
            "enableNodePublicIp": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Set rules to allow for compute with public IP"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to add to the resources"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2022-07-01",
              "name": "[parameters('nsgName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]"
            },
            {
              "condition": "[parameters('enableNodePublicIp')]",
              "type": "Microsoft.Network/networkSecurityGroups/securityRules",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('nsgName'), 'AzureMLPublicIPInbound')]",
              "properties": {
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "destinationPortRange": "44224",
                "sourceAddressPrefix": "AzureMachineLearning",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 130,
                "direction": "Inbound"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('nsgName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups/securityRules",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('nsgName'), 'AzureMLOutboundTcp')]",
              "properties": {
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "destinationPortRanges": [
                  "443",
                  "8787",
                  "18881"
                ],
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "AzureMachineLearning",
                "access": "Allow",
                "priority": 140,
                "direction": "Outbound"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('nsgName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups/securityRules",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('nsgName'), 'AzureMLOutboundUdp')]",
              "properties": {
                "protocol": "Udp",
                "sourcePortRange": "*",
                "destinationPortRange": "5831",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "AzureMachineLearning",
                "access": "Allow",
                "priority": 150,
                "direction": "Outbound"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('nsgName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups/securityRules",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('nsgName'), 'BatchNodeManagementOutbound')]",
              "properties": {
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "443",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "[format('BatchNodeManagement.{0}', parameters('workspaceRegion'))]",
                "access": "Allow",
                "priority": 160,
                "direction": "Outbound"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('nsgName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups/securityRules",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('nsgName'), 'OrchestratorStorageAccount')]",
              "properties": {
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "destinationPortRange": "443",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "[format('Storage.{0}', parameters('workspaceRegion'))]",
                "access": "Allow",
                "priority": 170,
                "direction": "Outbound"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('nsgName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups/securityRules",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('nsgName'), 'SiloStorageAccount')]",
              "properties": {
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "destinationPortRange": "443",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "[format('Storage.{0}', parameters('location'))]",
                "access": "Allow",
                "priority": 171,
                "direction": "Outbound"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('nsgName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups/securityRules",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('nsgName'), 'AzureActiveDirectory')]",
              "properties": {
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "AzureActiveDirectory",
                "access": "Allow",
                "priority": 180,
                "direction": "Outbound"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('nsgName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups/securityRules",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('nsgName'), 'AzureFrontDoor')]",
              "properties": {
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "destinationPortRange": "443",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "AzureFrontDoor.FrontEnd",
                "access": "Allow",
                "priority": 190,
                "direction": "Outbound"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('nsgName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups/securityRules",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('nsgName'), 'AzureContainerRegistryOrch')]",
              "properties": {
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "destinationPortRange": "443",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "[format('AzureContainerRegistry.{0}', parameters('workspaceRegion'))]",
                "access": "Allow",
                "priority": 200,
                "direction": "Outbound"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('nsgName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups/securityRules",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('nsgName'), 'AzureContainerRegistrySilo')]",
              "properties": {
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "destinationPortRange": "443",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "[format('AzureContainerRegistry.{0}', parameters('location'))]",
                "access": "Allow",
                "priority": 201,
                "direction": "Outbound"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('nsgName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups/securityRules",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('nsgName'), 'MicrosoftContainerRegistry')]",
              "properties": {
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "destinationPortRange": "443",
                "sourceAddressPrefix": "VirtualNetwork",
                "destinationAddressPrefix": "MicrosoftContainerRegistry",
                "access": "Allow",
                "priority": 210,
                "direction": "Outbound"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('nsgName'))]"
              ]
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('nsgName'))]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-deployment', parameters('vnetResourceName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('pairRegion')]"
          },
          "virtualNetworkName": {
            "value": "[parameters('vnetResourceName')]"
          },
          "networkSecurityGroupId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-deployment', parameters('nsgResourceName'))), '2020-10-01').outputs.id.value]"
          },
          "vnetAddressPrefix": {
            "value": "[parameters('vnetAddressPrefix')]"
          },
          "subnets": {
            "value": [
              {
                "name": "compute",
                "addressPrefix": "[parameters('computeSubnetPrefix')]"
              },
              {
                "name": "endpoints",
                "addressPrefix": "[parameters('endpointsSubnetPrefix')]"
              }
            ]
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.14.85.62628",
              "templateHash": "12102256299858550532"
            }
          },
          "parameters": {
            "virtualNetworkName": {
              "type": "string",
              "metadata": {
                "description": "Name of the virtual network resource"
              }
            },
            "networkSecurityGroupId": {
              "type": "string",
              "metadata": {
                "description": "Group ID of the network security group"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Azure region of the deployment"
              }
            },
            "vnetAddressPrefix": {
              "type": "string",
              "defaultValue": "10.0.0.0/16",
              "metadata": {
                "description": "Virtual network address prefix"
              }
            },
            "subnets": {
              "type": "array",
              "defaultValue": [
                {
                  "name": "snet-training",
                  "addressPrefix": "10.0.0.0/24"
                }
              ],
              "metadata": {
                "description": "Training subnets names and address prefix"
              }
            },
            "serviceEndpoints": {
              "type": "array",
              "defaultValue": [
                "Microsoft.KeyVault",
                "Microsoft.ContainerRegistry",
                "Microsoft.Storage"
              ],
              "metadata": {
                "description": "List of service endpoints expected on this vnet"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to add to the resources"
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "serviceEndpointsDefinition",
                "count": "[length(parameters('serviceEndpoints'))]",
                "input": {
                  "service": "[parameters('serviceEndpoints')[copyIndex('serviceEndpointsDefinition')]]"
                }
              },
              {
                "name": "subnetsDefinition",
                "count": "[length(parameters('subnets'))]",
                "input": {
                  "name": "[parameters('subnets')[copyIndex('subnetsDefinition')].name]",
                  "properties": {
                    "addressPrefix": "[parameters('subnets')[copyIndex('subnetsDefinition')].addressPrefix]",
                    "privateEndpointNetworkPolicies": "Disabled",
                    "privateLinkServiceNetworkPolicies": "Disabled",
                    "serviceEndpoints": "[variables('serviceEndpointsDefinition')]",
                    "networkSecurityGroup": {
                      "id": "[parameters('networkSecurityGroupId')]"
                    }
                  }
                }
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2022-01-01",
              "name": "[parameters('virtualNetworkName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "[parameters('vnetAddressPrefix')]"
                  ]
                },
                "subnets": "[variables('subnetsDefinition')]"
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('virtualNetworkName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('{0}-deployment', parameters('nsgResourceName')))]"
      ]
    },
    {
      "condition": "[and(parameters('machineLearningIsPrivate'), parameters('createMachineLearningPLE'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-{1}-ple-deployment', parameters('machineLearningName'), parameters('pairBaseName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('pairRegion')]"
          },
          "pleRootName": {
            "value": "[format('ple-{0}-{1}', parameters('machineLearningName'), parameters('pairBaseName'))]"
          },
          "resourceServiceId": {
            "value": "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('machineLearningName'))]"
          },
          "subnetId": {
            "value": "[format('{0}/subnets/endpoints', reference(resourceId('Microsoft.Resources/deployments', format('{0}-deployment', parameters('vnetResourceName'))), '2020-10-01').outputs.id.value)]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "useStaticIPAddress": {
            "value": "[not(empty(parameters('amlPLEStaticIPs')))]"
          },
          "privateIPAddress": {
            "value": "[parameters('amlPLEStaticIPs')]"
          },
          "privateDNSZoneName": {
            "value": "[variables('amlPrivateDnsZoneName')]"
          },
          "groupId": {
            "value": "amlworkspace"
          },
          "memberNames": {
            "value": [
              "default",
              "notebook",
              "inference"
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.14.85.62628",
              "templateHash": "9101708035419555637"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Azure region of the deployment"
              }
            },
            "resourceServiceId": {
              "type": "string",
              "metadata": {
                "description": "Service ID of the resource to create private link endpoint to"
              }
            },
            "pleRootName": {
              "type": "string",
              "metadata": {
                "description": "Name of the storage blob private link endpoint"
              }
            },
            "subnetId": {
              "type": "string",
              "metadata": {
                "description": "Resource ID of the subnet"
              }
            },
            "useStaticIPAddress": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "use privateIPAddress to assign a specific static IP address to PLE"
              }
            },
            "privateIPAddress": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Specify the private IP address on the subnet."
              }
            },
            "privateDNSZoneName": {
              "type": "string",
              "metadata": {
                "description": "Name of the existing DNS zone to add the PLE to"
              }
            },
            "groupId": {
              "type": "string",
              "metadata": {
                "description": "Name of the DNS zone group to add to the PLE"
              }
            },
            "memberNames": {
              "type": "array",
              "defaultValue": [
                "[parameters('groupId')]"
              ],
              "metadata": {
                "description": "Member names to add to the DNS zone group"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to add to the resources"
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "staticIPConfigs",
                "count": "[length(range(0, variables('memberCount')))]",
                "input": {
                  "name": "[format('{0}-{1}-{2}-ipconfig', parameters('pleRootName'), parameters('groupId'), parameters('memberNames')[range(0, variables('memberCount'))[copyIndex('staticIPConfigs')]])]",
                  "properties": {
                    "groupId": "[parameters('groupId')]",
                    "memberName": "[parameters('memberNames')[range(0, variables('memberCount'))[copyIndex('staticIPConfigs')]]]",
                    "privateIPAddress": "[if(empty(parameters('privateIPAddress')), '', variables('privateIPAdresses')[range(0, variables('memberCount'))[copyIndex('staticIPConfigs')]])]"
                  }
                }
              }
            ],
            "memberCount": "[length(parameters('memberNames'))]",
            "privateIPAdresses": "[split(parameters('privateIPAddress'), ',')]"
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2022-01-01",
              "name": "[parameters('pleRootName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "ipConfigurations": "[if(parameters('useStaticIPAddress'), variables('staticIPConfigs'), createArray())]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('pleRootName')]",
                    "properties": {
                      "groupIds": [
                        "[parameters('groupId')]"
                      ],
                      "privateLinkServiceId": "[parameters('resourceServiceId')]",
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ],
                "subnet": {
                  "id": "[parameters('subnetId')]"
                }
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('pleRootName'), format('{0}-PrivateDnsZoneGroup', parameters('groupId')))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[parameters('privateDNSZoneName')]",
                    "properties": {
                      "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDNSZoneName'))]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', parameters('pleRootName'))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('pleRootName')]"
            },
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('pleRootName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', variables('amlPrivateDnsZoneName'), uniqueString(subscription().id, resourceGroup().id, parameters('vnetResourceName'), variables('amlPrivateDnsZoneName'), 'global'))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}-deployment', parameters('vnetResourceName')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-vnet-aml-compute-01', parameters('pairBaseName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "machineLearningName": {
            "value": "[parameters('machineLearningName')]"
          },
          "machineLearningRegion": {
            "value": "[parameters('machineLearningRegion')]"
          },
          "computeName": {
            "value": "[parameters('computeName')]"
          },
          "computeRegion": {
            "value": "[parameters('pairRegion')]"
          },
          "computeSKU": {
            "value": "[parameters('computeSKU')]"
          },
          "computeNodes": {
            "value": "[parameters('computeNodes')]"
          },
          "computeIdentityType": {
            "value": "UserAssigned"
          },
          "computeUaiName": {
            "value": "[parameters('jobsUaiName')]"
          },
          "subnetName": {
            "value": "compute"
          },
          "vnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-deployment', parameters('vnetResourceName'))), '2020-10-01').outputs.id.value]"
          },
          "enableNodePublicIp": {
            "value": "[parameters('enableNodePublicIp')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.14.85.62628",
              "templateHash": "5294871759130614635"
            }
          },
          "parameters": {
            "machineLearningName": {
              "type": "string",
              "metadata": {
                "description": "Name of AzureML workspace to attach compute+storage to."
              }
            },
            "machineLearningRegion": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The region of the machine learning workspace"
              }
            },
            "computeName": {
              "type": "string",
              "metadata": {
                "description": "Name of the compute cluster to create"
              }
            },
            "computeRegion": {
              "type": "string",
              "metadata": {
                "description": "Specifies the location of the compute resources."
              }
            },
            "computeSKU": {
              "type": "string",
              "defaultValue": "Standard_DS3_v2",
              "metadata": {
                "description": "VM size for the default compute cluster"
              }
            },
            "computeNodes": {
              "type": "int",
              "defaultValue": 4,
              "metadata": {
                "description": "VM nodes for the default compute cluster"
              }
            },
            "computeIdentityType": {
              "type": "string",
              "defaultValue": "UserAssigned",
              "allowedValues": [
                "UserAssigned",
                "SystemAssigned"
              ]
            },
            "computeUaiName": {
              "type": "string",
              "metadata": {
                "description": "Name of the UAI for the compute cluster (if computeIdentityType==UserAssigned)"
              }
            },
            "vnetId": {
              "type": "string",
              "metadata": {
                "description": "virtual network ID"
              }
            },
            "subnetName": {
              "type": "string",
              "metadata": {
                "description": "Subnet name"
              }
            },
            "enableNodePublicIp": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enable compute node public IP"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to curate the resources in Azure."
              }
            }
          },
          "variables": {
            "userAssignedIdentities": "[if(equals(parameters('computeIdentityType'), 'SystemAssigned'), null(), createObject(format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{2}', subscription().subscriptionId, resourceGroup().name, parameters('computeUaiName')), createObject()))]"
          },
          "resources": [
            {
              "type": "Microsoft.MachineLearningServices/workspaces/computes",
              "apiVersion": "2021-07-01",
              "name": "[format('{0}/{1}', parameters('machineLearningName'), parameters('computeName'))]",
              "location": "[parameters('machineLearningRegion')]",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "[parameters('computeIdentityType')]",
                "userAssignedIdentities": "[variables('userAssignedIdentities')]"
              },
              "properties": {
                "computeType": "AmlCompute",
                "computeLocation": "[parameters('computeRegion')]",
                "disableLocalAuth": true,
                "properties": {
                  "vmPriority": "Dedicated",
                  "vmSize": "[parameters('computeSKU')]",
                  "osType": "Linux",
                  "scaleSettings": {
                    "maxNodeCount": "[parameters('computeNodes')]",
                    "minNodeCount": 0,
                    "nodeIdleTimeBeforeScaleDown": "PT300S"
                  },
                  "enableNodePublicIp": "[parameters('enableNodePublicIp')]",
                  "isolatedNetwork": false,
                  "remoteLoginPortPublicAccess": "Disabled",
                  "subnet": {
                    "id": "[format('{0}/subnets/{1}', parameters('vnetId'), parameters('subnetName'))]"
                  }
                }
              }
            }
          ],
          "outputs": {
            "identityPrincipalId": {
              "type": "string",
              "value": "[if(equals(parameters('computeIdentityType'), 'UserAssigned'), reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('computeUaiName')), '2022-01-31-preview').principalId, reference(resourceId('Microsoft.MachineLearningServices/workspaces/computes', parameters('machineLearningName'), parameters('computeName')), '2021-07-01', 'full').identity.principalId)]"
            },
            "compute": {
              "type": "string",
              "value": "[parameters('computeName')]"
            },
            "region": {
              "type": "string",
              "value": "[parameters('computeRegion')]"
            },
            "subnetName": {
              "type": "string",
              "value": "[parameters('subnetName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('jobsUaiName'))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}-deployment', parameters('vnetResourceName')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-attach-existing-storage', parameters('pairBaseName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "machineLearningName": {
            "value": "[parameters('machineLearningName')]"
          },
          "storageAccountName": {
            "value": "[parameters('existingStorageAccountName')]"
          },
          "storageAccountResourceGroup": {
            "value": "[parameters('existingStorageAccountResourceGroup')]"
          },
          "storageAccountSubscriptionId": {
            "value": "[parameters('existingStorageAccountSubscriptionId')]"
          },
          "storageRegion": {
            "value": "[parameters('pairRegion')]"
          },
          "containerName": {
            "value": "[parameters('existingStorageContainerName')]"
          },
          "datastoreName": {
            "value": "[parameters('datastoreName')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.14.85.62628",
              "templateHash": "3205176988572460763"
            }
          },
          "parameters": {
            "machineLearningName": {
              "type": "string",
              "metadata": {
                "description": "Name of AzureML workspace to attach compute+storage to."
              }
            },
            "storageAccountName": {
              "type": "string",
              "metadata": {
                "description": "Existing storage account name to attach to the pair."
              }
            },
            "storageRegion": {
              "type": "string",
              "metadata": {
                "description": "Azure region of the storage to create"
              }
            },
            "storageAccountResourceGroup": {
              "type": "string",
              "defaultValue": "[resourceGroup().name]",
              "metadata": {
                "description": "Resource group of the existing storage account to attach to the pair."
              }
            },
            "storageAccountSubscriptionId": {
              "type": "string",
              "defaultValue": "[subscription().subscriptionId]",
              "metadata": {
                "description": "SubscriptionId of the existing storage account to attach to the pair."
              }
            },
            "containerName": {
              "type": "string",
              "defaultValue": "private",
              "metadata": {
                "description": "Name of the storage container resource to create for the pair"
              }
            },
            "datastoreName": {
              "type": "string",
              "defaultValue": "[replace(format('datastore_{0}', parameters('storageAccountName')), '-', '_')]",
              "metadata": {
                "description": "Name of the datastore for attaching the storage to the AzureML workspace."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to add to the resources"
              }
            }
          },
          "variables": {
            "storageId": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Storage/storageAccounts/{2}', parameters('storageAccountSubscriptionId'), parameters('storageAccountResourceGroup'), parameters('storageAccountName'))]"
          },
          "resources": [
            {
              "type": "Microsoft.MachineLearningServices/workspaces/datastores",
              "apiVersion": "2022-06-01-preview",
              "name": "[format('{0}/{1}', parameters('machineLearningName'), parameters('datastoreName'))]",
              "properties": {
                "credentials": {
                  "credentialsType": "None"
                },
                "description": "[format('Private storage in region {0}', parameters('storageRegion'))]",
                "properties": {},
                "datastoreType": "AzureBlob",
                "accountName": "[parameters('storageAccountName')]",
                "containerName": "[parameters('containerName')]",
                "resourceGroup": "[parameters('storageAccountResourceGroup')]",
                "subscriptionId": "[parameters('storageAccountSubscriptionId')]",
                "tags": "[parameters('tags')]"
              }
            }
          ],
          "outputs": {
            "storageId": {
              "type": "string",
              "value": "[variables('storageId')]"
            },
            "storageName": {
              "type": "string",
              "value": "[parameters('storageAccountName')]"
            },
            "containerName": {
              "type": "string",
              "value": "[parameters('containerName')]"
            },
            "datastoreName": {
              "type": "string",
              "value": "[format('{0}/{1}', parameters('machineLearningName'), parameters('datastoreName'))]"
            }
          }
        }
      }
    },
    {
      "condition": "[equals(parameters('storagePublicNetworkAccess'), 'Disabled')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-endpoint-to-pair-storage', parameters('pairBaseName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('pairRegion')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "resourceServiceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-attach-existing-storage', parameters('pairBaseName'))), '2020-10-01').outputs.storageId.value]"
          },
          "pleRootName": {
            "value": "[format('ple-{0}-to-{1}-st-blob', reference(resourceId('Microsoft.Resources/deployments', format('{0}-attach-existing-storage', parameters('pairBaseName'))), '2020-10-01').outputs.storageName.value, parameters('pairBaseName'))]"
          },
          "subnetId": {
            "value": "[format('{0}/subnets/endpoints', reference(resourceId('Microsoft.Resources/deployments', format('{0}-deployment', parameters('vnetResourceName'))), '2020-10-01').outputs.id.value)]"
          },
          "useStaticIPAddress": {
            "value": "[not(empty(parameters('storagePLEStaticIP')))]"
          },
          "privateIPAddress": {
            "value": "[parameters('storagePLEStaticIP')]"
          },
          "privateDNSZoneName": {
            "value": "[parameters('blobPrivateDNSZoneName')]"
          },
          "groupId": {
            "value": "blob"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.14.85.62628",
              "templateHash": "9101708035419555637"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Azure region of the deployment"
              }
            },
            "resourceServiceId": {
              "type": "string",
              "metadata": {
                "description": "Service ID of the resource to create private link endpoint to"
              }
            },
            "pleRootName": {
              "type": "string",
              "metadata": {
                "description": "Name of the storage blob private link endpoint"
              }
            },
            "subnetId": {
              "type": "string",
              "metadata": {
                "description": "Resource ID of the subnet"
              }
            },
            "useStaticIPAddress": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "use privateIPAddress to assign a specific static IP address to PLE"
              }
            },
            "privateIPAddress": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Specify the private IP address on the subnet."
              }
            },
            "privateDNSZoneName": {
              "type": "string",
              "metadata": {
                "description": "Name of the existing DNS zone to add the PLE to"
              }
            },
            "groupId": {
              "type": "string",
              "metadata": {
                "description": "Name of the DNS zone group to add to the PLE"
              }
            },
            "memberNames": {
              "type": "array",
              "defaultValue": [
                "[parameters('groupId')]"
              ],
              "metadata": {
                "description": "Member names to add to the DNS zone group"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to add to the resources"
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "staticIPConfigs",
                "count": "[length(range(0, variables('memberCount')))]",
                "input": {
                  "name": "[format('{0}-{1}-{2}-ipconfig', parameters('pleRootName'), parameters('groupId'), parameters('memberNames')[range(0, variables('memberCount'))[copyIndex('staticIPConfigs')]])]",
                  "properties": {
                    "groupId": "[parameters('groupId')]",
                    "memberName": "[parameters('memberNames')[range(0, variables('memberCount'))[copyIndex('staticIPConfigs')]]]",
                    "privateIPAddress": "[if(empty(parameters('privateIPAddress')), '', variables('privateIPAdresses')[range(0, variables('memberCount'))[copyIndex('staticIPConfigs')]])]"
                  }
                }
              }
            ],
            "memberCount": "[length(parameters('memberNames'))]",
            "privateIPAdresses": "[split(parameters('privateIPAddress'), ',')]"
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2022-01-01",
              "name": "[parameters('pleRootName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "ipConfigurations": "[if(parameters('useStaticIPAddress'), variables('staticIPConfigs'), createArray())]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('pleRootName')]",
                    "properties": {
                      "groupIds": [
                        "[parameters('groupId')]"
                      ],
                      "privateLinkServiceId": "[parameters('resourceServiceId')]",
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ],
                "subnet": {
                  "id": "[parameters('subnetId')]"
                }
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('pleRootName'), format('{0}-PrivateDnsZoneGroup', parameters('groupId')))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[parameters('privateDNSZoneName')]",
                    "properties": {
                      "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDNSZoneName'))]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', parameters('pleRootName'))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('pleRootName')]"
            },
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('pleRootName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('{0}-attach-existing-storage', parameters('pairBaseName')))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}-deployment', parameters('vnetResourceName')))]"
      ]
    }
  ],
  "outputs": {
    "identityPrincipalId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-vnet-aml-compute-01', parameters('pairBaseName'))), '2020-10-01').outputs.identityPrincipalId.value]"
    },
    "storageName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-attach-existing-storage', parameters('pairBaseName'))), '2020-10-01').outputs.storageName.value]"
    },
    "storageServiceId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-attach-existing-storage', parameters('pairBaseName'))), '2020-10-01').outputs.storageId.value]"
    },
    "computeName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-vnet-aml-compute-01', parameters('pairBaseName'))), '2020-10-01').outputs.compute.value]"
    },
    "region": {
      "type": "string",
      "value": "[parameters('pairRegion')]"
    },
    "vnetName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-deployment', parameters('vnetResourceName'))), '2020-10-01').outputs.name.value]"
    },
    "vnetId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-deployment', parameters('vnetResourceName'))), '2020-10-01').outputs.id.value]"
    },
    "subnetId": {
      "type": "string",
      "value": "[format('{0}/subnets/{1}', reference(resourceId('Microsoft.Resources/deployments', format('{0}-deployment', parameters('vnetResourceName'))), '2020-10-01').outputs.id.value, reference(resourceId('Microsoft.Resources/deployments', format('{0}-vnet-aml-compute-01', parameters('pairBaseName'))), '2020-10-01').outputs.subnetName.value)]"
    }
  }
}