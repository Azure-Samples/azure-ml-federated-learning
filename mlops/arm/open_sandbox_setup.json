{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.11.1.770",
      "templateHash": "1362945507667147812"
    }
  },
  "parameters": {
    "demoBaseName": {
      "type": "string",
      "defaultValue": "fldemo",
      "metadata": {
        "description": "Base name of the demo, used for creating all resources as prefix"
      }
    },
    "identityType": {
      "type": "string",
      "defaultValue": "UserAssigned",
      "allowedValues": [
        "UserAssigned",
        "SystemAssigned"
      ]
    },
    "orchestratorRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location of the orchestrator (workspace, central storage and compute)."
      }
    },
    "siloRegions": {
      "type": "array",
      "defaultValue": [
        "westus",
        "francecentral",
        "brazilsouth"
      ],
      "metadata": {
        "description": "List of each region in which to create an internal silo."
      }
    },
    "computeSKU": {
      "type": "string",
      "defaultValue": "Standard_DS13_v2",
      "metadata": {
        "description": "The VM used for creating compute clusters in orchestrator and silos."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {
        "Owner": "AzureML Samples",
        "Project": "azure-ml-federated-learning",
        "Environment": "dev",
        "Toolkit": "bicep",
        "Docs": "https://github.com/Azure-Samples/azure-ml-federated-learning"
      },
      "metadata": {
        "description": "Tags to curate the resources in Azure."
      }
    }
  },
  "variables": {
    "siloCount": "[length(parameters('siloRegions'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-deploy-aml-{1}', parameters('demoBaseName'), parameters('orchestratorRegion'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "machineLearningName": {
            "value": "[format('aml-{0}', parameters('demoBaseName'))]"
          },
          "location": {
            "value": "[parameters('orchestratorRegion')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.11.1.770",
              "templateHash": "14535409971068554388"
            }
          },
          "parameters": {
            "machineLearningName": {
              "type": "string",
              "metadata": {
                "description": "Machine learning workspace name"
              }
            },
            "machineLearningFriendlyName": {
              "type": "string",
              "defaultValue": "[parameters('machineLearningName')]",
              "metadata": {
                "description": "Machine learning workspace display name"
              }
            },
            "machineLearningDescription": {
              "type": "string",
              "defaultValue": "Federated Learning open demo orchestrator workspace",
              "metadata": {
                "description": "Machine learning workspace description"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Specifies the location of the Azure Machine Learning workspace and dependent resources."
              }
            },
            "hbi_workspace": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Specifies whether to reduce telemetry collection and enable additional encryption."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to curate the resources in Azure."
              }
            },
            "applicationInsightsName": {
              "type": "string",
              "defaultValue": "[format('appi-{0}', parameters('machineLearningName'))]",
              "metadata": {
                "description": "Name of the application insights resource"
              }
            },
            "containerRegistryName": {
              "type": "string",
              "defaultValue": "[replace(format('cr-{0}', parameters('machineLearningName')), '-', '')]",
              "metadata": {
                "description": "Name of the container registry resource"
              }
            },
            "keyVaultName": {
              "type": "string",
              "defaultValue": "[format('kv-{0}', parameters('machineLearningName'))]",
              "metadata": {
                "description": "Name of the key vault resource"
              }
            },
            "storageAccountName": {
              "type": "string",
              "defaultValue": "[replace(format('st-{0}', parameters('machineLearningName')), '-', '')]",
              "metadata": {
                "description": "Name of the storage account resource"
              }
            },
            "defaultComputeName": {
              "type": "string",
              "defaultValue": "cpu-cluster",
              "metadata": {
                "description": "Name of the default compute cluster in orchestrator"
              }
            },
            "defaultComputeSKU": {
              "type": "string",
              "defaultValue": "Standard_DS3_v2",
              "metadata": {
                "description": "VM size for the default compute cluster"
              }
            },
            "defaultComputeNodes": {
              "type": "int",
              "defaultValue": 4,
              "metadata": {
                "description": "VM nodes for the default compute cluster"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2022-05-01",
              "name": "[parameters('storageAccountName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "Standard_LRS"
              },
              "kind": "StorageV2",
              "properties": {
                "encryption": {
                  "services": {
                    "blob": {
                      "enabled": true
                    },
                    "file": {
                      "enabled": true
                    }
                  },
                  "keySource": "Microsoft.Storage"
                },
                "supportsHttpsTrafficOnly": true
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2022-07-01",
              "name": "[parameters('keyVaultName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "tenantId": "[subscription().tenantId]",
                "sku": {
                  "name": "standard",
                  "family": "A"
                },
                "accessPolicies": [],
                "enableSoftDelete": true
              }
            },
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[parameters('applicationInsightsName')]",
              "location": "[if(or(equals(parameters('location'), 'eastus2'), equals(parameters('location'), 'westcentralus')), 'southcentralus', parameters('location'))]",
              "tags": "[parameters('tags')]",
              "kind": "web",
              "properties": {
                "Application_Type": "web"
              }
            },
            {
              "type": "Microsoft.ContainerRegistry/registries",
              "apiVersion": "2021-09-01",
              "name": "[parameters('containerRegistryName')]",
              "sku": {
                "name": "Standard"
              },
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "adminUserEnabled": true
              }
            },
            {
              "type": "Microsoft.MachineLearningServices/workspaces",
              "apiVersion": "2022-05-01",
              "name": "[parameters('machineLearningName')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "friendlyName": "[parameters('machineLearningFriendlyName')]",
                "description": "[parameters('machineLearningDescription')]",
                "storageAccount": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                "keyVault": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                "applicationInsights": "[resourceId('Microsoft.Insights/components', parameters('applicationInsightsName'))]",
                "containerRegistry": "[resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName'))]",
                "hbiWorkspace": "[parameters('hbi_workspace')]",
                "imageBuildCompute": "[parameters('defaultComputeName')]",
                "publicNetworkAccess": "Enabled"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Insights/components', parameters('applicationInsightsName'))]",
                "[resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName'))]",
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.MachineLearningServices/workspaces/computes",
              "apiVersion": "2022-05-01",
              "name": "[format('{0}/{1}', parameters('machineLearningName'), parameters('defaultComputeName'))]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "computeType": "AmlCompute",
                "properties": {
                  "vmSize": "[parameters('defaultComputeSKU')]",
                  "subnet": "[json('null')]",
                  "osType": "Linux",
                  "scaleSettings": {
                    "maxNodeCount": "[parameters('defaultComputeNodes')]",
                    "minNodeCount": 0,
                    "nodeIdleTimeBeforeScaleDown": "PT300S"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('machineLearningName'))]"
              ]
            }
          ],
          "outputs": {
            "storage": {
              "type": "string",
              "value": "[parameters('storageAccountName')]"
            },
            "compute": {
              "type": "string",
              "value": "[format('{0}/{1}', parameters('machineLearningName'), parameters('defaultComputeName'))]"
            },
            "workspace": {
              "type": "string",
              "value": "[parameters('machineLearningName')]"
            },
            "region": {
              "type": "string",
              "value": "[parameters('location')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-deploy-orchestrator', parameters('demoBaseName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "machineLearningName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-deploy-aml-{1}', parameters('demoBaseName'), parameters('orchestratorRegion')))).outputs.workspace.value]"
          },
          "machineLearningRegion": {
            "value": "[parameters('orchestratorRegion')]"
          },
          "region": {
            "value": "[parameters('orchestratorRegion')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "pairBaseName": {
            "value": "[format('{0}-orch', parameters('demoBaseName'))]"
          },
          "computeName": {
            "value": "cpu-orchestrator"
          },
          "computeSKU": {
            "value": "[parameters('computeSKU')]"
          },
          "computeNodes": {
            "value": 4
          },
          "datastoreName": {
            "value": "datastore_orchestrator"
          },
          "identityType": {
            "value": "[parameters('identityType')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.11.1.770",
              "templateHash": "15473417400972976343"
            }
          },
          "parameters": {
            "machineLearningName": {
              "type": "string",
              "metadata": {
                "description": "Name of AzureML workspace to attach compute+storage to."
              }
            },
            "machineLearningRegion": {
              "type": "string",
              "metadata": {
                "description": "The region of the machine learning workspace"
              }
            },
            "region": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Specifies the location of the pair resources."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to curate the resources in Azure."
              }
            },
            "pairBaseName": {
              "type": "string",
              "metadata": {
                "description": "Base name used for creating all pair resources."
              }
            },
            "storageAccountName": {
              "type": "string",
              "defaultValue": "[replace(format('st{0}', parameters('pairBaseName')), '-', '')]",
              "metadata": {
                "description": "Name of the storage account resource to create for the pair"
              }
            },
            "storageContainerName": {
              "type": "string",
              "defaultValue": "private",
              "metadata": {
                "description": "Name of the storage container resource to create for the pair"
              }
            },
            "datastoreName": {
              "type": "string",
              "defaultValue": "[replace(format('datastore_{0}', parameters('pairBaseName')), '-', '_')]",
              "metadata": {
                "description": "Name of the datastore for attaching the storage to the AzureML workspace."
              }
            },
            "computeName": {
              "type": "string",
              "defaultValue": "[format('cpu-cluster-{0}', parameters('pairBaseName'))]",
              "metadata": {
                "description": "Name of the default compute cluster for the pair"
              }
            },
            "computeSKU": {
              "type": "string",
              "defaultValue": "Standard_DS3_v2",
              "metadata": {
                "description": "VM size for the default compute cluster"
              }
            },
            "computeNodes": {
              "type": "int",
              "defaultValue": 4,
              "metadata": {
                "description": "VM nodes for the default compute cluster"
              }
            },
            "identityType": {
              "type": "string",
              "defaultValue": "UserAssigned",
              "allowedValues": [
                "UserAssigned",
                "SystemAssigned"
              ]
            },
            "uaiName": {
              "type": "string",
              "defaultValue": "[format('uai-{0}', parameters('pairBaseName'))]",
              "metadata": {
                "description": "Name of the UAI for the pair compute cluster (if identityType==UserAssigned)"
              }
            }
          },
          "variables": {
            "storageAccountCleanName": "[substring(parameters('storageAccountName'), 0, min(length(parameters('storageAccountName')), 24))]",
            "userAssignedIdentities": "[if(equals(parameters('identityType'), 'SystemAssigned'), null(), createObject(format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{2}', subscription().subscriptionId, resourceGroup().name, parameters('uaiName')), createObject()))]"
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2021-06-01",
              "name": "[variables('storageAccountCleanName')]",
              "location": "[parameters('region')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "Standard_LRS"
              },
              "kind": "StorageV2",
              "properties": {
                "encryption": {
                  "services": {
                    "blob": {
                      "enabled": true
                    },
                    "file": {
                      "enabled": true
                    }
                  },
                  "keySource": "Microsoft.Storage"
                },
                "supportsHttpsTrafficOnly": true
              }
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2022-05-01",
              "name": "[format('{0}/default/{1}', variables('storageAccountCleanName'), parameters('storageContainerName'))]",
              "properties": {
                "metadata": {},
                "publicAccess": "None"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountCleanName'))]"
              ]
            },
            {
              "type": "Microsoft.MachineLearningServices/workspaces/datastores",
              "apiVersion": "2022-06-01-preview",
              "name": "[format('{0}/{1}', parameters('machineLearningName'), parameters('datastoreName'))]",
              "properties": {
                "credentials": {
                  "credentialsType": "None"
                },
                "description": "[format('Private storage in region {0}', parameters('region'))]",
                "properties": {},
                "datastoreType": "AzureBlob",
                "accountName": "[variables('storageAccountCleanName')]",
                "containerName": "[parameters('storageContainerName')]",
                "resourceGroup": "[resourceGroup().name]",
                "subscriptionId": "[subscription().subscriptionId]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', split(format('{0}/default/{1}', variables('storageAccountCleanName'), parameters('storageContainerName')), '/')[0], split(format('{0}/default/{1}', variables('storageAccountCleanName'), parameters('storageContainerName')), '/')[1], split(format('{0}/default/{1}', variables('storageAccountCleanName'), parameters('storageContainerName')), '/')[2])]"
              ]
            },
            {
              "condition": "[equals(parameters('identityType'), 'UserAssigned')]",
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2022-01-31-preview",
              "name": "[parameters('uaiName')]",
              "location": "[parameters('region')]",
              "tags": "[parameters('tags')]",
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountCleanName'))]"
              ]
            },
            {
              "type": "Microsoft.MachineLearningServices/workspaces/computes",
              "apiVersion": "2021-07-01",
              "name": "[format('{0}/{1}', parameters('machineLearningName'), parameters('computeName'))]",
              "location": "[parameters('machineLearningRegion')]",
              "identity": {
                "type": "[parameters('identityType')]",
                "userAssignedIdentities": "[variables('userAssignedIdentities')]"
              },
              "properties": {
                "computeType": "AmlCompute",
                "computeLocation": "[parameters('region')]",
                "properties": {
                  "vmPriority": "Dedicated",
                  "vmSize": "[parameters('computeSKU')]",
                  "osType": "Linux",
                  "scaleSettings": {
                    "maxNodeCount": "[parameters('computeNodes')]",
                    "minNodeCount": 0,
                    "nodeIdleTimeBeforeScaleDown": "PT300S"
                  },
                  "enableNodePublicIp": true,
                  "isolatedNetwork": false,
                  "remoteLoginPortPublicAccess": "Disabled",
                  "subnet": "[json('null')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountCleanName'))]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('uaiName'))]"
              ]
            }
          ],
          "outputs": {
            "identityPrincipalId": {
              "type": "string",
              "value": "[if(equals(parameters('identityType'), 'UserAssigned'), reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('uaiName')), '2022-01-31-preview').principalId, reference(resourceId('Microsoft.MachineLearningServices/workspaces/computes', parameters('machineLearningName'), parameters('computeName')), '2021-07-01', 'full').identity.principalId)]"
            },
            "storageName": {
              "type": "string",
              "value": "[variables('storageAccountCleanName')]"
            },
            "storageServiceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountCleanName'))]"
            },
            "container": {
              "type": "string",
              "value": "[format('{0}/default/{1}', variables('storageAccountCleanName'), parameters('storageContainerName'))]"
            },
            "datastore": {
              "type": "string",
              "value": "[format('{0}/{1}', parameters('machineLearningName'), parameters('datastoreName'))]"
            },
            "compute": {
              "type": "string",
              "value": "[parameters('computeName')]"
            },
            "region": {
              "type": "string",
              "value": "[parameters('region')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('{0}-deploy-aml-{1}', parameters('demoBaseName'), parameters('orchestratorRegion')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-deploy-orchestrator-permission-{1}', parameters('demoBaseName'), parameters('orchestratorRegion'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-deploy-orchestrator', parameters('demoBaseName')))).outputs.storageName.value]"
          },
          "identityPrincipalId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-deploy-orchestrator', parameters('demoBaseName')))).outputs.identityPrincipalId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.11.1.770",
              "templateHash": "15993831950689019004"
            }
          },
          "parameters": {
            "storageAccountName": {
              "type": "string",
              "metadata": {
                "description": "Full path to storage"
              }
            },
            "identityPrincipalId": {
              "type": "string",
              "metadata": {
                "description": "PrincipalId of the managed identity"
              }
            },
            "computeToStorageRoles": {
              "type": "array",
              "defaultValue": [
                "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/ba92f5b4-2d11-453d-a403-e96b0029c9fe', subscription().subscriptionId)]",
                "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/81a9662b-bebf-436f-a333-f67b29880f12', subscription().subscriptionId)]",
                "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/c12c1c16-33a1-487b-954d-41c89c60f349', subscription().subscriptionId)]"
              ],
              "metadata": {
                "description": "Role definition IDs for the compute towards the internal storage"
              }
            }
          },
          "resources": [
            {
              "copy": {
                "name": "roleAssignments",
                "count": "[length(parameters('computeToStorageRoles'))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceGroup().id, resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), parameters('identityPrincipalId'), parameters('computeToStorageRoles')[copyIndex()])]",
              "properties": {
                "roleDefinitionId": "[parameters('computeToStorageRoles')[copyIndex()]]",
                "principalId": "[parameters('identityPrincipalId')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('{0}-deploy-orchestrator', parameters('demoBaseName')))]"
      ]
    },
    {
      "copy": {
        "name": "silos",
        "count": "[length(range(0, variables('siloCount')))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-deploy-silo-{1}-{2}', parameters('demoBaseName'), range(0, variables('siloCount'))[copyIndex()], parameters('siloRegions')[range(0, variables('siloCount'))[copyIndex()]])]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "machineLearningName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-deploy-aml-{1}', parameters('demoBaseName'), parameters('orchestratorRegion')))).outputs.workspace.value]"
          },
          "machineLearningRegion": {
            "value": "[parameters('orchestratorRegion')]"
          },
          "region": {
            "value": "[parameters('siloRegions')[range(0, variables('siloCount'))[copyIndex()]]]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "pairBaseName": {
            "value": "[format('{0}-silo{1}-{2}', parameters('demoBaseName'), range(0, variables('siloCount'))[copyIndex()], parameters('siloRegions')[range(0, variables('siloCount'))[copyIndex()]])]"
          },
          "computeName": {
            "value": "[format('cpu-silo{0}-{1}', range(0, variables('siloCount'))[copyIndex()], parameters('siloRegions')[range(0, variables('siloCount'))[copyIndex()]])]"
          },
          "computeSKU": {
            "value": "[parameters('computeSKU')]"
          },
          "computeNodes": {
            "value": 4
          },
          "datastoreName": {
            "value": "[format('datastore_silo{0}_{1}', range(0, variables('siloCount'))[copyIndex()], parameters('siloRegions')[range(0, variables('siloCount'))[copyIndex()]])]"
          },
          "identityType": {
            "value": "[parameters('identityType')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.11.1.770",
              "templateHash": "15473417400972976343"
            }
          },
          "parameters": {
            "machineLearningName": {
              "type": "string",
              "metadata": {
                "description": "Name of AzureML workspace to attach compute+storage to."
              }
            },
            "machineLearningRegion": {
              "type": "string",
              "metadata": {
                "description": "The region of the machine learning workspace"
              }
            },
            "region": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Specifies the location of the pair resources."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to curate the resources in Azure."
              }
            },
            "pairBaseName": {
              "type": "string",
              "metadata": {
                "description": "Base name used for creating all pair resources."
              }
            },
            "storageAccountName": {
              "type": "string",
              "defaultValue": "[replace(format('st{0}', parameters('pairBaseName')), '-', '')]",
              "metadata": {
                "description": "Name of the storage account resource to create for the pair"
              }
            },
            "storageContainerName": {
              "type": "string",
              "defaultValue": "private",
              "metadata": {
                "description": "Name of the storage container resource to create for the pair"
              }
            },
            "datastoreName": {
              "type": "string",
              "defaultValue": "[replace(format('datastore_{0}', parameters('pairBaseName')), '-', '_')]",
              "metadata": {
                "description": "Name of the datastore for attaching the storage to the AzureML workspace."
              }
            },
            "computeName": {
              "type": "string",
              "defaultValue": "[format('cpu-cluster-{0}', parameters('pairBaseName'))]",
              "metadata": {
                "description": "Name of the default compute cluster for the pair"
              }
            },
            "computeSKU": {
              "type": "string",
              "defaultValue": "Standard_DS3_v2",
              "metadata": {
                "description": "VM size for the default compute cluster"
              }
            },
            "computeNodes": {
              "type": "int",
              "defaultValue": 4,
              "metadata": {
                "description": "VM nodes for the default compute cluster"
              }
            },
            "identityType": {
              "type": "string",
              "defaultValue": "UserAssigned",
              "allowedValues": [
                "UserAssigned",
                "SystemAssigned"
              ]
            },
            "uaiName": {
              "type": "string",
              "defaultValue": "[format('uai-{0}', parameters('pairBaseName'))]",
              "metadata": {
                "description": "Name of the UAI for the pair compute cluster (if identityType==UserAssigned)"
              }
            }
          },
          "variables": {
            "storageAccountCleanName": "[substring(parameters('storageAccountName'), 0, min(length(parameters('storageAccountName')), 24))]",
            "userAssignedIdentities": "[if(equals(parameters('identityType'), 'SystemAssigned'), null(), createObject(format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{2}', subscription().subscriptionId, resourceGroup().name, parameters('uaiName')), createObject()))]"
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2021-06-01",
              "name": "[variables('storageAccountCleanName')]",
              "location": "[parameters('region')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "Standard_LRS"
              },
              "kind": "StorageV2",
              "properties": {
                "encryption": {
                  "services": {
                    "blob": {
                      "enabled": true
                    },
                    "file": {
                      "enabled": true
                    }
                  },
                  "keySource": "Microsoft.Storage"
                },
                "supportsHttpsTrafficOnly": true
              }
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2022-05-01",
              "name": "[format('{0}/default/{1}', variables('storageAccountCleanName'), parameters('storageContainerName'))]",
              "properties": {
                "metadata": {},
                "publicAccess": "None"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountCleanName'))]"
              ]
            },
            {
              "type": "Microsoft.MachineLearningServices/workspaces/datastores",
              "apiVersion": "2022-06-01-preview",
              "name": "[format('{0}/{1}', parameters('machineLearningName'), parameters('datastoreName'))]",
              "properties": {
                "credentials": {
                  "credentialsType": "None"
                },
                "description": "[format('Private storage in region {0}', parameters('region'))]",
                "properties": {},
                "datastoreType": "AzureBlob",
                "accountName": "[variables('storageAccountCleanName')]",
                "containerName": "[parameters('storageContainerName')]",
                "resourceGroup": "[resourceGroup().name]",
                "subscriptionId": "[subscription().subscriptionId]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', split(format('{0}/default/{1}', variables('storageAccountCleanName'), parameters('storageContainerName')), '/')[0], split(format('{0}/default/{1}', variables('storageAccountCleanName'), parameters('storageContainerName')), '/')[1], split(format('{0}/default/{1}', variables('storageAccountCleanName'), parameters('storageContainerName')), '/')[2])]"
              ]
            },
            {
              "condition": "[equals(parameters('identityType'), 'UserAssigned')]",
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2022-01-31-preview",
              "name": "[parameters('uaiName')]",
              "location": "[parameters('region')]",
              "tags": "[parameters('tags')]",
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountCleanName'))]"
              ]
            },
            {
              "type": "Microsoft.MachineLearningServices/workspaces/computes",
              "apiVersion": "2021-07-01",
              "name": "[format('{0}/{1}', parameters('machineLearningName'), parameters('computeName'))]",
              "location": "[parameters('machineLearningRegion')]",
              "identity": {
                "type": "[parameters('identityType')]",
                "userAssignedIdentities": "[variables('userAssignedIdentities')]"
              },
              "properties": {
                "computeType": "AmlCompute",
                "computeLocation": "[parameters('region')]",
                "properties": {
                  "vmPriority": "Dedicated",
                  "vmSize": "[parameters('computeSKU')]",
                  "osType": "Linux",
                  "scaleSettings": {
                    "maxNodeCount": "[parameters('computeNodes')]",
                    "minNodeCount": 0,
                    "nodeIdleTimeBeforeScaleDown": "PT300S"
                  },
                  "enableNodePublicIp": true,
                  "isolatedNetwork": false,
                  "remoteLoginPortPublicAccess": "Disabled",
                  "subnet": "[json('null')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountCleanName'))]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('uaiName'))]"
              ]
            }
          ],
          "outputs": {
            "identityPrincipalId": {
              "type": "string",
              "value": "[if(equals(parameters('identityType'), 'UserAssigned'), reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('uaiName')), '2022-01-31-preview').principalId, reference(resourceId('Microsoft.MachineLearningServices/workspaces/computes', parameters('machineLearningName'), parameters('computeName')), '2021-07-01', 'full').identity.principalId)]"
            },
            "storageName": {
              "type": "string",
              "value": "[variables('storageAccountCleanName')]"
            },
            "storageServiceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountCleanName'))]"
            },
            "container": {
              "type": "string",
              "value": "[format('{0}/default/{1}', variables('storageAccountCleanName'), parameters('storageContainerName'))]"
            },
            "datastore": {
              "type": "string",
              "value": "[format('{0}/{1}', parameters('machineLearningName'), parameters('datastoreName'))]"
            },
            "compute": {
              "type": "string",
              "value": "[parameters('computeName')]"
            },
            "region": {
              "type": "string",
              "value": "[parameters('region')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('{0}-deploy-aml-{1}', parameters('demoBaseName'), parameters('orchestratorRegion')))]"
      ]
    },
    {
      "copy": {
        "name": "siloToSiloPermissions",
        "count": "[length(range(0, variables('siloCount')))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-deploy-silo{1}-permission', parameters('demoBaseName'), range(0, variables('siloCount'))[copyIndex()])]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-deploy-silo-{1}-{2}', parameters('demoBaseName'), range(0, variables('siloCount'))[range(0, variables('siloCount'))[copyIndex()]], parameters('siloRegions')[range(0, variables('siloCount'))[range(0, variables('siloCount'))[copyIndex()]]]))).outputs.storageName.value]"
          },
          "identityPrincipalId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-deploy-silo-{1}-{2}', parameters('demoBaseName'), range(0, variables('siloCount'))[range(0, variables('siloCount'))[copyIndex()]], parameters('siloRegions')[range(0, variables('siloCount'))[range(0, variables('siloCount'))[copyIndex()]]]))).outputs.identityPrincipalId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.11.1.770",
              "templateHash": "15993831950689019004"
            }
          },
          "parameters": {
            "storageAccountName": {
              "type": "string",
              "metadata": {
                "description": "Full path to storage"
              }
            },
            "identityPrincipalId": {
              "type": "string",
              "metadata": {
                "description": "PrincipalId of the managed identity"
              }
            },
            "computeToStorageRoles": {
              "type": "array",
              "defaultValue": [
                "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/ba92f5b4-2d11-453d-a403-e96b0029c9fe', subscription().subscriptionId)]",
                "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/81a9662b-bebf-436f-a333-f67b29880f12', subscription().subscriptionId)]",
                "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/c12c1c16-33a1-487b-954d-41c89c60f349', subscription().subscriptionId)]"
              ],
              "metadata": {
                "description": "Role definition IDs for the compute towards the internal storage"
              }
            }
          },
          "resources": [
            {
              "copy": {
                "name": "roleAssignments",
                "count": "[length(parameters('computeToStorageRoles'))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceGroup().id, resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), parameters('identityPrincipalId'), parameters('computeToStorageRoles')[copyIndex()])]",
              "properties": {
                "roleDefinitionId": "[parameters('computeToStorageRoles')[copyIndex()]]",
                "principalId": "[parameters('identityPrincipalId')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "silos"
      ]
    },
    {
      "copy": {
        "name": "siloToOrchPermissions",
        "count": "[length(range(0, variables('siloCount')))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-deploy-silo{1}-to-orch-permission', parameters('demoBaseName'), range(0, variables('siloCount'))[copyIndex()])]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-deploy-orchestrator', parameters('demoBaseName')))).outputs.storageName.value]"
          },
          "identityPrincipalId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-deploy-silo-{1}-{2}', parameters('demoBaseName'), range(0, variables('siloCount'))[range(0, variables('siloCount'))[copyIndex()]], parameters('siloRegions')[range(0, variables('siloCount'))[range(0, variables('siloCount'))[copyIndex()]]]))).outputs.identityPrincipalId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.11.1.770",
              "templateHash": "15993831950689019004"
            }
          },
          "parameters": {
            "storageAccountName": {
              "type": "string",
              "metadata": {
                "description": "Full path to storage"
              }
            },
            "identityPrincipalId": {
              "type": "string",
              "metadata": {
                "description": "PrincipalId of the managed identity"
              }
            },
            "computeToStorageRoles": {
              "type": "array",
              "defaultValue": [
                "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/ba92f5b4-2d11-453d-a403-e96b0029c9fe', subscription().subscriptionId)]",
                "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/81a9662b-bebf-436f-a333-f67b29880f12', subscription().subscriptionId)]",
                "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/c12c1c16-33a1-487b-954d-41c89c60f349', subscription().subscriptionId)]"
              ],
              "metadata": {
                "description": "Role definition IDs for the compute towards the internal storage"
              }
            }
          },
          "resources": [
            {
              "copy": {
                "name": "roleAssignments",
                "count": "[length(parameters('computeToStorageRoles'))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceGroup().id, resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), parameters('identityPrincipalId'), parameters('computeToStorageRoles')[copyIndex()])]",
              "properties": {
                "roleDefinitionId": "[parameters('computeToStorageRoles')[copyIndex()]]",
                "principalId": "[parameters('identityPrincipalId')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('{0}-deploy-orchestrator', parameters('demoBaseName')))]",
        "silos"
      ]
    }
  ]
}