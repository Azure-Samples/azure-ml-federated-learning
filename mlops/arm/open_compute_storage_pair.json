{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.11.1.770",
      "templateHash": "6176123577929173658"
    }
  },
  "parameters": {
    "machineLearningName": {
      "type": "string",
      "metadata": {
        "description": "Name of AzureML workspace to attach compute+storage to."
      }
    },
    "machineLearningRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the machine learning workspace"
      }
    },
    "region": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Specifies the location of the pair resources."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Tags to curate the resources in Azure."
      }
    },
    "pairBaseName": {
      "type": "string",
      "metadata": {
        "description": "Base name used for creating all pair resources."
      }
    },
    "storageAccountName": {
      "type": "string",
      "defaultValue": "[replace(format('st{0}', parameters('pairBaseName')), '-', '')]",
      "metadata": {
        "description": "Name of the storage account resource to create for the pair"
      }
    },
    "storageContainerName": {
      "type": "string",
      "defaultValue": "private",
      "metadata": {
        "description": "Name of the storage container resource to create for the pair"
      }
    },
    "datastoreName": {
      "type": "string",
      "defaultValue": "[replace(format('datastore_{0}', parameters('pairBaseName')), '-', '_')]",
      "metadata": {
        "description": "Name of the datastore for attaching the storage to the AzureML workspace."
      }
    },
    "computeName": {
      "type": "string",
      "defaultValue": "[format('cpu-cluster-{0}', parameters('pairBaseName'))]",
      "metadata": {
        "description": "Name of the default compute cluster for the pair"
      }
    },
    "computeSKU": {
      "type": "string",
      "defaultValue": "Standard_DS3_v2",
      "metadata": {
        "description": "VM size for the default compute cluster"
      }
    },
    "computeNodes": {
      "type": "int",
      "defaultValue": 4,
      "metadata": {
        "description": "VM nodes for the default compute cluster"
      }
    },
    "identityType": {
      "type": "string",
      "defaultValue": "UserAssigned",
      "allowedValues": [
        "UserAssigned",
        "SystemAssigned"
      ]
    },
    "uaiName": {
      "type": "string",
      "defaultValue": "[format('uai-{0}', parameters('pairBaseName'))]",
      "metadata": {
        "description": "Name of the UAI for the pair compute cluster (if identityType==UserAssigned)"
      }
    },
    "applyDefaultPermissions": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Allow compute cluster to access storage account with R/W permissions (using UAI)"
      }
    }
  },
  "variables": {
    "storageAccountCleanName": "[substring(parameters('storageAccountName'), 0, min(length(parameters('storageAccountName')), 24))]",
    "userAssignedIdentities": "[if(equals(parameters('identityType'), 'SystemAssigned'), null(), createObject(format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{2}', subscription().subscriptionId, resourceGroup().name, parameters('uaiName')), createObject()))]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-06-01",
      "name": "[variables('storageAccountCleanName')]",
      "location": "[parameters('region')]",
      "tags": "[parameters('tags')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "encryption": {
          "services": {
            "blob": {
              "enabled": true
            },
            "file": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "supportsHttpsTrafficOnly": true
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2022-05-01",
      "name": "[format('{0}/default/{1}', variables('storageAccountCleanName'), parameters('storageContainerName'))]",
      "properties": {
        "metadata": {},
        "publicAccess": "None"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountCleanName'))]"
      ]
    },
    {
      "type": "Microsoft.MachineLearningServices/workspaces/datastores",
      "apiVersion": "2022-06-01-preview",
      "name": "[format('{0}/{1}', parameters('machineLearningName'), parameters('datastoreName'))]",
      "properties": {
        "credentials": {
          "credentialsType": "None"
        },
        "description": "[format('Private storage in region {0}', parameters('region'))]",
        "properties": {},
        "datastoreType": "AzureBlob",
        "accountName": "[variables('storageAccountCleanName')]",
        "containerName": "[parameters('storageContainerName')]",
        "resourceGroup": "[resourceGroup().name]",
        "subscriptionId": "[subscription().subscriptionId]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', split(format('{0}/default/{1}', variables('storageAccountCleanName'), parameters('storageContainerName')), '/')[0], split(format('{0}/default/{1}', variables('storageAccountCleanName'), parameters('storageContainerName')), '/')[1], split(format('{0}/default/{1}', variables('storageAccountCleanName'), parameters('storageContainerName')), '/')[2])]"
      ]
    },
    {
      "condition": "[equals(parameters('identityType'), 'UserAssigned')]",
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2022-01-31-preview",
      "name": "[parameters('uaiName')]",
      "location": "[parameters('region')]",
      "tags": "[parameters('tags')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountCleanName'))]"
      ]
    },
    {
      "type": "Microsoft.MachineLearningServices/workspaces/computes",
      "apiVersion": "2021-07-01",
      "name": "[format('{0}/{1}', parameters('machineLearningName'), parameters('computeName'))]",
      "location": "[parameters('machineLearningRegion')]",
      "identity": {
        "type": "[parameters('identityType')]",
        "userAssignedIdentities": "[variables('userAssignedIdentities')]"
      },
      "properties": {
        "computeType": "AmlCompute",
        "computeLocation": "[parameters('region')]",
        "properties": {
          "vmPriority": "Dedicated",
          "vmSize": "[parameters('computeSKU')]",
          "osType": "Linux",
          "scaleSettings": {
            "maxNodeCount": "[parameters('computeNodes')]",
            "minNodeCount": 0,
            "nodeIdleTimeBeforeScaleDown": "PT300S"
          },
          "enableNodePublicIp": true,
          "isolatedNetwork": false,
          "remoteLoginPortPublicAccess": "Disabled",
          "subnet": "[json('null')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountCleanName'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('uaiName'))]"
      ]
    },
    {
      "condition": "[parameters('applyDefaultPermissions')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-{1}-deploy-internal-default-permission', parameters('pairBaseName'), parameters('region'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": {
            "value": "[variables('storageAccountCleanName')]"
          },
          "identityPrincipalId": {
            "value": "[if(equals(parameters('identityType'), 'UserAssigned'), reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('uaiName')), '2022-01-31-preview').principalId, reference(resourceId('Microsoft.MachineLearningServices/workspaces/computes', parameters('machineLearningName'), parameters('computeName')), '2021-07-01', 'full').identity.principalId)]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.11.1.770",
              "templateHash": "15993831950689019004"
            }
          },
          "parameters": {
            "storageAccountName": {
              "type": "string",
              "metadata": {
                "description": "Full path to storage"
              }
            },
            "identityPrincipalId": {
              "type": "string",
              "metadata": {
                "description": "PrincipalId of the managed identity"
              }
            },
            "computeToStorageRoles": {
              "type": "array",
              "defaultValue": [
                "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/ba92f5b4-2d11-453d-a403-e96b0029c9fe', subscription().subscriptionId)]",
                "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/81a9662b-bebf-436f-a333-f67b29880f12', subscription().subscriptionId)]",
                "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/c12c1c16-33a1-487b-954d-41c89c60f349', subscription().subscriptionId)]"
              ],
              "metadata": {
                "description": "Role definition IDs for the compute towards the internal storage"
              }
            }
          },
          "resources": [
            {
              "copy": {
                "name": "roleAssignments",
                "count": "[length(parameters('computeToStorageRoles'))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceGroup().id, resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), parameters('identityPrincipalId'), parameters('computeToStorageRoles')[copyIndex()])]",
              "properties": {
                "roleDefinitionId": "[parameters('computeToStorageRoles')[copyIndex()]]",
                "principalId": "[parameters('identityPrincipalId')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.MachineLearningServices/workspaces/computes', parameters('machineLearningName'), parameters('computeName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountCleanName'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('uaiName'))]"
      ]
    }
  ],
  "outputs": {
    "identityPrincipalId": {
      "type": "string",
      "value": "[if(equals(parameters('identityType'), 'UserAssigned'), reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('uaiName')), '2022-01-31-preview').principalId, reference(resourceId('Microsoft.MachineLearningServices/workspaces/computes', parameters('machineLearningName'), parameters('computeName')), '2021-07-01', 'full').identity.principalId)]"
    },
    "storageName": {
      "type": "string",
      "value": "[variables('storageAccountCleanName')]"
    },
    "storageServiceId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountCleanName'))]"
    },
    "container": {
      "type": "string",
      "value": "[format('{0}/default/{1}', variables('storageAccountCleanName'), parameters('storageContainerName'))]"
    },
    "datastore": {
      "type": "string",
      "value": "[format('{0}/{1}', parameters('machineLearningName'), parameters('datastoreName'))]"
    },
    "compute": {
      "type": "string",
      "value": "[parameters('computeName')]"
    },
    "region": {
      "type": "string",
      "value": "[parameters('region')]"
    }
  }
}